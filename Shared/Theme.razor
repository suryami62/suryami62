@inject ILocalStorageService LocalStorage
@inject IJSRuntime JSRuntime

<label class="swap swap-rotate">
    <input class="theme-controller" type="checkbox" value="@DarkTheme" @attributes="CheckedAttributes"
        @onclick="ThemeController" />
    @foreach (var themeMode in ThemeModes)
    {
        <i class="fill-current @themeMode.Icon fa-2x @themeMode.State"></i>
    }
</label>

@code {
    [Parameter]
    public string? DarkTheme { get; set; }

    private sealed record ThemeMode(string Icon, string State);

    private readonly List<ThemeMode> ThemeModes = new()
{
new ThemeMode("fa-solid fa-sun", "swap-on"),
new ThemeMode("fa-solid fa-moon", "swap-off")
};

    private bool ThemeChange { get; set; }

    private Dictionary<string, object> CheckedAttributes { get; set; } = new();

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await GetThemeState();
            StateHasChanged();
        }
    }

    private async Task ThemeController()
    {
        ThemeChange = !ThemeChange;
        await LocalStorage.SetItemAsync("darkTheme", ThemeChange);
        await GetThemeState();
    }

    private async Task GetThemeState()
    {
        ThemeChange = await LocalStorage.GetItemAsync<bool>("darkTheme");
        CheckedAttributes = ThemeChange ? new() { { "checked", "checked" } } : new();
    }
}
