@page "/"

@inject IConfiguration Configuration
@inject UserProfileService UserProfileService

<PageTitle>@Configuration["Site:Title"]</PageTitle>

<HeadContent>
    <MetaOpenGraphCard Title="@Configuration["Site:Title"]"
                       Description="Physics teacher and .NET developer. Explore my blog, portfolio, and curriculum vitae."
                       Image="https://suryami62.my.id/img/socialCard.webp"
                       Url="@Configuration["Site:BaseUrl"]" />
</HeadContent>

<div class="min-h-screen hero">
    @if (Data?.UserData is null)
    {
        <SkeletonHome />
    } 
    else
    {
        <div class="flex-col hero-content md:flex-row">
            <Avatar Img="@Data.UserData.ProfilePicture" Alt="@($"{Data.UserData.Name} Image")" />
            <div class="text-center md:text-left">
                <h1 class="pb-2 text-6xl font-bold">@Data.UserData.Name</h1>
                <span class="italic font-semibold">@($"@{Data.UserData.Username}")</span>
                <p class="py-2">@Data.UserData.Bio?.Text</p>
                <div class="pt-2.5">
                    @if (Data.UserData.SocialMediaLinks is not null)
                    {
                        foreach (var social in GetSocialMediaLinks(Data.UserData.SocialMediaLinks))
                        {
                            <Social AriaLabel="@social.AriaLabel" Href="@social.Href" IconClass="@social.IconClass" />
                        }
                    }
                    <Social AriaLabel="Email" Href="@($"mailto:{siteEmail}")" IconClass="fa-solid fa-envelope-square" />
                </div>
            </div>
        </div>
    }
</div>

@code {
    private UserProfile? Data;

    private string? siteEmail;

    private sealed record SocialMediaLink(string AriaLabel, string Href, string IconClass);

    protected override async Task OnInitializedAsync()
    {
        var username = Configuration["GraphQL:Variables:Username"];

        if (string.IsNullOrWhiteSpace(username))
        {
            throw new InvalidOperationException("The username configuration value is missing or empty.");
        }

        Data = await UserProfileService.GetUserProfileAsync(username);

        siteEmail = Configuration["Site:Email"];
    }

    private IEnumerable<SocialMediaLink> GetSocialMediaLinks(SocialMediaLinks links)
    {
        var results = new List<SocialMediaLink>(capacity: 4);

        if (!string.IsNullOrWhiteSpace(links.Instagram))
        {
            results.Add(new SocialMediaLink("Instagram", links.Instagram, "fa-brands fa-square-instagram"));
        }
        if (!string.IsNullOrWhiteSpace(links.Twitter))
        {
            results.Add(new SocialMediaLink("Twitter", links.Twitter, "fa-brands fa-square-x-twitter"));
        }
        if (!string.IsNullOrWhiteSpace(links.Linkedin))
        {
            results.Add(new SocialMediaLink("Linkedin", links.Linkedin, "fa-brands fa-linkedin"));
        }
        if (!string.IsNullOrWhiteSpace(links.Github))
        {
            results.Add(new SocialMediaLink("GitHub", links.Github, "fa-brands fa-square-github"));
        }

        return results;
    }
}
